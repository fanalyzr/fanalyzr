---
alwaysApply: true
---
# Atlassian MCP Integration Standards

## Jira Branch Automation Workflow
**CRITICAL: Always follow this workflow when working on Jira tickets**

### Starting Work on a Jira Issue
When starting work on a Jira Issue (e.g., user says they will start/pick up/work on an issue, references an Issue Key like ABC-123, or when transitioning an issue to In Progress):

1. **Auto-create and checkout git branch** using naming convention `[IssueKey]-[Summary]` with spaces replaced by dashes
2. **Retrieve Issue Summary** from Jira using Atlassian integration
3. **Build branch name**: `IssueKey + '-' + SummaryWithSpacesReplacedByDashes`
4. **Execute git command** (PowerShell-safe):
   ```powershell
   $branchName = "<IssueKey>-<Summary-with-dashes>"
   git rev-parse --verify --quiet "$branchName" > $null
   if ($LASTEXITCODE -eq 0) {
     git checkout "$branchName"
   } else {
     git checkout -b "$branchName"
   }
   ```

### Completing Work on a Jira Issue
When user indicates work is complete (e.g., says work is done, close the ticket, ready to merge, or wants to complete the issue):

1. **Commit all changes**: `git add .` then `git commit -m "[IssueKey] [Summary]"`
2. **Merge to main**: `git checkout main`, `git pull origin main`, `git merge [branch-name]`
3. **Push to remote**: `git push origin main`
4. **Cleanup branches**: Delete local and remote feature branches
5. **Mark Jira Issue as Done**: Transition issue to "Done" status with completion comment

**This workflow is MANDATORY and must be followed for every Jira ticket.**

## Jira Issue Creation and Editing
- Include the title in the "Summary" field
- Inside the "Description" field include a User Story, Acceptance Criteria, Technical Details, and a Definition of Done
- Story points are stored in the "Story point estimate" field
- Priority is stored in the "Priority" field
- Assign the Issue to the who requests Issue creation unless told otherwise
- Use bullet lists for unordered lists and numbered lists for ordered lists
- Use properly formatted markdown, Jira will correctly convert markdown to ADF on their end.
- Remove any instance of "[]" or "[ ]" and use bullets instead.
- When creating multiple Issues, create an Epic and logically link the Issues to the Epic
- When an Issue is created, generate a new page in Confluence for the Technical Documentation (all relevant information for software engineers, developers, systems engineers, and administrators) in this folder: https://fanalyzr.atlassian.net/wiki/spaces/FA/pages/1540742/. The title should be [IssueKey] - [Summary] - Technical Doc
- When an Issue is created, generate a new page in Confluence for the Product Documentation (all relevant information to Product Managers/Owners and Stakeholders) in this folder: https://fanalyzr.atlassian.net/wiki/spaces/FA/pages/1540751/. The title should be [IssueKey] - [Summary] - Product Doc
- When an Issue is created, generate a new page in Confluence for the User Documentation (only if information is relevant end-users) in this folder: https://fanalyzr.atlassian.net/wiki/spaces/FA/pages/1540760/. The title should be [IssueKey] - [Summary] - User Doc
- When creating documentation, always add links to any related Confluence pages, Issues, and Epics

## MCP Server Usage
- Use Atlassian MCP server for Confluence and Jira operations
- Follow established patterns for API calls and data handling
- Implement proper error handling for MCP server responses
- Use TypeScript interfaces for Atlassian data structures

## Confluence Operations
- Use consistent page creation patterns
- Follow established content structure and formatting
- Implement proper version control and change tracking
- Use appropriate space selection and organization

## Jira Operations
- Follow established issue creation and management patterns
- Use consistent field mapping and validation
- Implement proper workflow transitions
- Maintain proper issue linking and relationships

## Data Handling
- Validate all data before sending to MCP server
- Handle API rate limits and pagination properly
- Implement proper error recovery mechanisms
- Use consistent data transformation patterns

## Error Handling
- Implement comprehensive error handling for MCP operations
- Provide meaningful error messages to users
- Log errors appropriately for debugging
- Implement retry mechanisms for transient failures

## Integration Patterns
- Use consistent authentication and authorization patterns
- Implement proper session management
- Follow established security best practices
- Use appropriate caching strategies for performance

- Follow established security best practices
- Use appropriate caching strategies for performance
