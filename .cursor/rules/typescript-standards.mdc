---
globs: *.ts,*.tsx
---
# TypeScript Coding Standards

## Type Definitions
- Always define proper TypeScript interfaces and types in [src/types/](mdc:src/types/) directory
- Use strict TypeScript configuration as defined in [tsconfig.json](mdc:tsconfig.json)
- Prefer interfaces over types for object shapes
- Use generic types for reusable components

## Import/Export Patterns
- Follow the import sorting rules defined in [eslint.config.mjs](mdc:eslint.config.mjs)
- Use named exports for components and utilities
- Use default exports for page components and main entry points
- Group imports: external libraries, internal modules, relative imports

## Component Patterns
- Use functional components with hooks
- Define proper prop interfaces for all components
- Use React.FC type for functional components
- Implement proper error boundaries where needed

## State Management
- Use React hooks (useState, useEffect, useContext) for local state
- Use SWR for server state management
- Implement proper loading and error states
- Use TypeScript for all state definitions

## File Naming
- Use kebab-case for file names
- Use PascalCase for component names
- Use camelCase for functions and variables
- Add .types.ts suffix for type definition files
